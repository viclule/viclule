<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Vicente Guerrero</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Vicente Guerrero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Jan 2020 20:48:43 +0100</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Swarm Particle Interpolation</title>
      <link>/posts/swarm-particle-interpolation/</link>
      <pubDate>Sun, 05 Jan 2020 20:48:43 +0100</pubDate>
      
      <guid>/posts/swarm-particle-interpolation/</guid>
      <description>Adapted to the N dimensional case  Visit the github repository for the full code.    It is a professional implementation based on the article from Iran Macedo.  
Theory []  
&amp;ldquo;In computational science, particle swarm optimization (PSO) [1] is a computational method that optimizes a problem by iteratively trying to improve a candidate solution with regard to a given measure of quality. It solves a problem by having a population of candidate solutions, here dubbed particles, and moving these particles around in the search-space according to simple mathematical formulae over the particle&#39;s position and velocity.</description>
    </item>
    
    <item>
      <title>Multilinear Interpolation in tensorflow</title>
      <link>/posts/multilinear-interpolation-tensorflow/</link>
      <pubDate>Sun, 05 Jan 2020 20:48:21 +0100</pubDate>
      
      <guid>/posts/multilinear-interpolation-tensorflow/</guid>
      <description>Extension of the tf.image.resize_bilinear to the N dimensional case  Visit the github repository for the full code.   
The function extends the functionality of tf.image.resize_bilinear for N dimensional Tensors.  
Strategy The strategy is fairly simple, tensors are interpolated two dimensions at a time using the already existant tf.image.resize_bilinear function.
[]  
Test   Building a 3D volume using a black image, an android image and a white image.</description>
    </item>
    
    <item>
      <title>Harris corner detector on PyCUDA</title>
      <link>/posts/pycuda-corner-detector/</link>
      <pubDate>Sun, 05 Jan 2020 19:15:12 +0100</pubDate>
      
      <guid>/posts/pycuda-corner-detector/</guid>
      <description>A first intruduction to GPU programming  Visit the github repository for the full code.   
The function devides the image in four different parts to process them on different streams.
These are the execution times for the different implementations:
 Python Code -&amp;gt; ≈2.22 seconds PyCUDA – single stream -&amp;gt; ≈0.0018 seconds PyCUDA – four streams (with concurrency) -&amp;gt; ≈0.0015 seconds  This is the image used to test the code:   []</description>
    </item>
    
  </channel>
</rss>